non js search results 
 
1) add file called page-search.php and search.php
2) search.php = like archives for the searches // if statement for error handling 
3) page-search.php is where the search box is 
4) make sure the js btn in the header is a tag with the url of = echo esc_url(site_url('/'));
5) return false on the overlay function is Search.js
6) 'subtitle' => get_search_query() //search title results 
7) esc_html(get_search_query(false))
8) searchform.php = special file for search form, and to call it its = get_search_form();

user roles and permissions 
9) new plugin add 'new role from memberpress'

10) add to mu-plugins > uni-post-types to events > 
 'capability_type' => 'event', 
 'map_meta_cap' => true //going to automatically map and require the right capablities at the right time, alot of potentional of what could be done

11) by default is 'capability_type' => 'post'

12) in the new plguin add events and roles granted then choose a user and assign it to them also add to the main admin again 

subscriber role basically they can't do anything admin full access, editor is just below in permisions
13) setting > general > memebership ticked && New User Default Role as subscriber

14) wp-login.php?action=register url to register to the site only as a subscriber

15)  <?php 
          if(is_user_logged_in()) { ?>
            <a href="<?php echo wp_logout_url(); ?>" class="btn btn--small  btn--dark-orange float-left btn--with-photo">
            <span class="site-header__avatar"><?php echo get_avatar(get_current_user_id(), 60); ?></span>
            <span class="btn__text">Log Out</span>
          </a>
       <?php  } else { ?>          
            <a href="#" class="btn btn--small btn--orange float-left push-right">Login</a>
            <a href="<?php echo esc_url(site_url('/wp-signup.php') OR wp_registration_url();); ?>" class="btn btn--small  btn--dark-orange float-left">Sign Up</a>

       <?php } ?>

16) // redirect subscriber account out of admin and onto homepage 
// wp function that we want to hook up on to 
// $ourCurrentUser is an object which contains arrays, ->roles will enable us to see all the different roles for the user 
add_action('admin_init', 'redirectSubsToFrontend');

function redirectSubsToFrontend() {
  $ourCurrentUser = wp_get_current_user();

  if (count($ourCurrentUser->roles) == 1 AND $ourCurrentUser->roles[0] == 'subscriber') {
     wp_redirect(site_url('/')); // re direct some
     exit;

  }
}

//no dashboard on top
add_action('wp_loaded', 'noAdminBar');

function noAdminBar() {
  $ourCurrentUser = wp_get_current_user();

  if (count($ourCurrentUser->roles) == 1 AND $ourCurrentUser->roles[0] == 'subscriber') {
    show_admin_bar(false);
  }
}

adding notes 
17) make a normal page called my notes and a file called page-my-notes.php then link it on the header with  <a href="<?php echo esc_url(site_url('/my-notes')); ?>" class="btn btn--small btn--orange float-left push-right">My Notes</a>

18) on page-my-notes add for validation === 

if (!is_user_logged_in()) { // is user NOT logged in 
   wp_redirect(esc_url(site_url('/')));             // re direct to home page 
      exit;  // exit once it performs the redirect it can stop and rest and not use server resources 
}

19) in the body config the loop and add the notes as textfield with delete and edit button 

TO DELETE A POST 

20) in the js focus on the delete and edit button using the wp rest api with ajax 

21) use a nonce (Number Usde Once) for protection WordPress nonces are one-time use security tokens generated by WordPress to help protect URLs and forms from misuse.
    x - wordpress creates one when you make an account, then it's used so that wp can trust us  

22) inside of functions.php > wp_enqueue_scripts' > wp_localize_script(arg1, arg2, array('nonce' => wp_create_nonce('wp_rest'))) 

23) make delete button flexible and use the ID of whatever post it's sitting right next to.

on the php the_post() > <li data-id="<?php the_ID(); ?>">

24) add readonly to inputs and textarea after be able to edit also add save button 

25) 'capability_type' => 'note', so by saying capability type equals something new and unique we are setting up brand new permissions that only apply to this post type
    'map_meta_cap' => true, this line of code will actually enforce and require the permissions at the right time and at the right place cap stands for capability 


26) server side policy enforcing the privacy over the ajax status of publish 

27) edit role > unfiltered HTML import to keep un ticked 

28) <?php echo esc_attr(get_the_content()); ?> esc_html() elso esc_textarea() etc  very important to avoid hackers use the right one in that right context
    just to add extra security use something like sanitize_text_field([]); on title


29) problem with notes maybe in the functions and js file

LIKE BUTTON

How are we going to save these likes into the wordpress database to do this create a custom post type and give it a name of like and individual like post will represent a one to one relationship between the id number of the current user and id number of the liked professor 
30) create custom post type go into mu-plugins > uni-post-types.php > likes
 
31) in single-professor.php > 

custom api endpoints for like create a like or delete a like 
32) register custom api endpoint by ajax jquery and rest_api_init'

33) meta_input will create wordpress native custom fields or sometimes wp offically refers to them as meta fields.
wp_insert_post( array(
   'post_type' => 'like',
   'post_status' => 'publish',
   'meta_input' => array (

   )
))

34) When we create a new object using the WP_Query class the created object will contain
 a property named found_posts which is the total number of posts that the query found 
 without worrying about pagination. The ->  symbol is how you look inside an object in PHP 
 for a property/method, similar to the dot/period in JavaScript.